node {
    if (params.property != "") {

        //读取json数据
        def data = readJSON text: params.property

        def git = data['appConfig']['gitUrl']

        def commitId = data["appConfig"]["commitId"]

        def isSkipTest = data["appConfig"]["isSkipTest"]

        def isCodeCheck = data["appConfig"]["isCodeCheck"]

        def language = data["appConfig"]["language"]

        def realName = data["appConfig"]["realName"]

        def pom = data["appConfig"]["pom"]

        def namespace = data["appConfig"]["language"] + "-service"

        def registryHost = data["kubeConfig"]["registryHost"]

        def envCode = data["kubeConfig"]["env"]

        //处理java找jar包的路径
        def projectPath = data["kubeConfig"]["projectPath"]

        //执行的阶段
        def stageChoice = data["appConfig"]["stageChoice"]

        //发布类型，二方库为inner-library，其他为all
        def releaseType = data["appConfig"]["releaseType"]

        if (stageChoice.contains("UpdateScript")) {

            stage("UpdateScript") {
                try {
                    sh '''
                        if [ -d "/data/nova-data/nova-script" ];then
                            cd /data/nova-data/nova-script
                            git pull
                        else
                            git clone git@code.aihuishou.com:fusion/nova-script.git /data/nova-data/nova-script
                        fi
                    '''
                } catch (error) {
                    echo "Ignore concurrent deploy to update script exception"
                }
            }
        }

        if (stageChoice.contains("Checkout")) {

            stage("Checkout") {

                withCredentials([string(credentialsId: 'gitlab', variable: 'GITLAB_CREDENTIAL')]) {

                    checkout([$class                           : 'GitSCM',
                              branches                         : [[name: """${commitId}"""]],
                              doGenerateSubmoduleConfigurations: false,
                              extensions                       : [[$class             : 'SubmoduleOption',
                                                                   disableSubmodules  : false,
                                                                   parentCredentials  : true,
                                                                   recursiveSubmodules: true,
                                                                   reference          : '',
                                                                   trackingSubmodules : false
                                                                  ]],
                              submoduleCfg                     : [],
                              userRemoteConfigs                : [[
                                                                          credentialsId: """${GITLAB_CREDENTIAL}""",
                                                                          url          : """${git}"""
                                                                  ]]
                    ])
                }

            }
        }
        if (stageChoice.contains("Junit")) {

            stage("Junit") {

                if ("${language}" == "java") {

                    withMaven(maven: 'maven_3.3.3') {
                        if ("${pom}" == "child") {

                            sh "mvn test -U -Denv=${envCode} -f ./" + """${projectPath}""" + "/pom.xml -P " + """${data['kubeConfig']['profiles']}"""

                        } else if ("${pom}" == "pl") {

                            sh "mvn test package -U -Denv=${envCode} -pl " + """${projectPath}""" + " -am -P " + """${data['kubeConfig']['profiles']}"""

                        } else {

                            sh "mvn test -U -Denv=${envCode} -f ./pom.xml -P " + """${data['kubeConfig']['profiles']}"""
                        }
                    }
                }
            }
        }

        // 将参数写进本地文件
        writeJSON file: 'data.json', json: data

        if ("${language}" == "java" && "${isCodeCheck}" == "true" && ("${envCode}" == "fat" || "${envCode}" == "uat")) {

            if (stageChoice.contains("Sonar")) {
                stage("Sonar") {
                    if ("${language}" == "java") {
                        withSonarQubeEnv() {
                            withMaven(maven: 'maven_3.3.3') {
                                if ("${isSkipTest}" == "true") {
                                    sh "mvn sonar:sonar -Dsonar.java.binaries=target/sonar -Dsonar.projectKey=${realName} -Dsonar.projectName=${realName} -Dmaven.test.skip=${isSkipTest}"
                                } else {
                                    sh "mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package -Dmaven.test.failure.ignore=true sonar:sonar -Dsonar.java.binaries=target/classes -Dsonar.projectKey=${realName} -Dsonar.projectName=${realName} -Dmaven.test.skip=${isSkipTest}"
                                }
                            }
                        }
                    }
                }
            }
            if (stageChoice.contains("Quality")) {

                stage("Quality") {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            if (envCode == "fat") {
                                error "Sonar检查不通过，请查看 http://sonar.aihuishou.com/dashboard?id=${realName} : ${qg.status}"
                            } else {
                                error "Sonar检查不通过，请查看 http://sonar-uat.aihuishou.com/dashboard?id=${realName} : ${qg.status}"
                            }

                        }
                    }
                }
            }
        }

        if (stageChoice.contains("Compile")) {

            stage("Compile") {

                if ("${language}" == "java") {

                    withMaven(maven: 'maven_3.3.3') {

                        if ("${pom}" == "child") {

                            sh "mvn clean package -U -Denv=${envCode} -Dmaven.test.skip=${isSkipTest} -f ./" + """${projectPath}""" + "/pom.xml -P " + """${data['kubeConfig']['profiles']}"""

                        } else if ("${pom}" == "pl") {

                            sh "mvn clean package -U -Denv=${envCode} -Dmaven.test.skip=${isSkipTest} -pl " + """${projectPath}""" + " -am -P " + """${data['kubeConfig']['profiles']}"""

                        } else {

                            sh "mvn clean package -U -Denv=${envCode} -Dmaven.test.skip=${isSkipTest} -f ./pom.xml -P " + """${data['kubeConfig']['profiles']}"""
                        }

                        if (releaseType == "inner-library") {
                            sh("echo mvn clean deploy -Denv=${envCode} -Dmaven.test.skip=$isSkipTest -f ./pom.xml -P")
                            try {
                                sh "mvn clean deploy -Denv=${envCode} -Dmaven.test.skip=$isSkipTest -f ./pom.xml -P " + """${data['kubeConfig']['profiles']}"""
                            } catch (error) {
                                echo "上传二方库失败，请检查版本是否已经存在！https://nexus.aihuishou.com"
                                sh "exit 1"
                            }
                        }
                    }
                } else if ("${language}" == "dotnet") {
                    def build_path = "${realName}" + "/src/" + "${realName}"
                    // 使用JOB_NAME解决并行发布问题
                    def container_name = "${JOB_NAME}"
                    def build_file = "${realName}" + ".csproj"
                    def compile_image_version = data["appConfig"]["baseImage"]["dotnetImgVersion"]
                    def compile_bash_image = "${registryHost}" + "/" + "${namespace}" + "/dotnet-build:" + "${compile_image_version}"
                    sh("echo compile_bash_image is [ ${compile_bash_image} ]，build_file is [ ${build_file} ]")
                    withEnv(
                            [
                                    "build_path=${build_path}",
                                    "container_name=${container_name}",
                                    "build_file=${build_file}"
                            ]
                    ) {
                        sh("echo 构建dotnet")
                        // 使用compile_bash_image 替换 builddotnet.tmp 中的变量build_image
                        sh """sed "s#{{ build_image }}#${compile_bash_image}#g" /data/nova-data/nova-script/cicd/build/builddotnet.temp > ${WORKSPACE}/builddotnet.sh"""
                        sh "chmod +x ${WORKSPACE}/builddotnet.sh"
                        sh "${WORKSPACE}/builddotnet.sh"
                    }
                } else if ("${language}" == "nodejs") {

                    sh("echo current language [ ${language} ] ")

                } else if ("${language}" == "python") {

                    sh("echo current language [ ${language} ] ")

                } else if ("${language}" == "static") {
                    echo "编译前端..."
                    sh "/data/creative_front_ci/buildfront.sh"

                    echo "上传二方OSS...."
                    sh "/data/pyenv/bin/python -u /data/creative_front_ci/upload_oss.py --oss_path=$oss"
                } else {

                    sh("echo current language [ ${language} ] not supported ")

                    sh "exit 1"
                }
            }
        }

        if (stageChoice.contains("DockerBuild")) {

            stage("Docker build") {
                sh "python3 -u /data/nova-data/nova-script/cicd/script.py --operation=ci"
            }
        }

        if (stageChoice.contains("RollingUpdate")) {

            stage("Rolling update") {
                sh "python3 -u /data/nova-data/nova-script/cicd/script.py --operation=cd"
            }
        }

        if (stageChoice.contains("CheckStatus")) {

            stage("Check status") {
                sh "python3 -u /data/nova-data/nova-script/cicd/kube/check_status.py"
            }
        }

    } else {

        sh("echo param error ")
        sh "exit 1"
    }
}